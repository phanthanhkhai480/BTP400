package lab4;

import java.util.ArrayList;
import java.util.Scanner;

public class ThreadExample {
	//option 1: use a static variable to find result
	static String M_SEARCHWORD = "Java";
	
	public static void main(String[] args) {
		
		//string of existing data
		String [][] data = {
				 { "java", "I love java", "c++", "python" },
				 { "c programs", "cookies", "java developers", "oops"},
				 { "john", "doe", "mary", "mark holmes"},
				 { "hello java java", "byebye", "java again?", "java what?"},
				 { "toronto", "montreal", "quebec city", "calgary"}
				 };
		
		//option 1: to take user input and find result
		//take input from user for keyword search
		//Scanner object = new Scanner(System.in);
		//System.out.print("+ search word: ");
		//String searchWord = object.nextLine();
		System.out.print("+ search word: " + M_SEARCHWORD);
		
		//length size of the data array
		int size = data.length;
		
		//boolean that received data after checked
		Boolean[] temp = null;
		
		//create an arrayList to hold data
		ArrayList<String> dataStore = new ArrayList<String>();
		
		//check to see if array contain the # of value is correct
		int counter = 0, fail_counter = 0;
		
		//create objects of SearchThreads to pass the array for comparision
		SearchThread[] threads = new SearchThread[size];
		
		//passing array data into SearchThread to analyze data
		for(int a = 0; a < size; a++) {
			threads[a] = new SearchThread(data[a], M_SEARCHWORD);
			
		}
		
		//joining point, wait for the threads to finish its task before continue
		try {
			System.out.println("+ summary");
			for(int b = 0; b < size; b++) {
				System.out.print("  row " + (b+1) + ": ");
				threads[b].start();
				threads[b].join();
				temp = threads[b].getResult();
				fail_counter = 0;
				for (int c = 0; c < temp.length; c++) {
					if(temp[c] == true) {
						dataStore.add(data[b][c]);
						counter++;
					} else
						fail_counter++;
				}
				if(fail_counter == temp.length)
					System.out.print("***");
				else {
					for(String stg: dataStore)
						System.out.print(stg + ", ");
				}
				dataStore.removeAll(dataStore);
				System.out.println();
				
			}
		} catch (InterruptedException error) {	}
		System.out.println("+ total number of strings found: " + counter + "\n");
		//object.close();
	}
}

class SearchThread extends Thread {
	private String search = "";
	private String[] dataArray;
	private Boolean[] dataReturn;
	
	public SearchThread() {
		this.search = "";
		this.dataArray = null;
		this.dataReturn = null;
	}
	
	public SearchThread(String[] information, String m_contain) {
		this.dataArray = information;
		this.search = m_contain;
		this.dataReturn = new Boolean[this.dataArray.length];
	}
	
	public void run() {
		for(int a = 0; a < this.dataArray.length; a++) {
			if(this.dataArray[a].contains(this.search)) {	this.dataReturn[a] = true;	} 
			else {	this.dataReturn[a] = false;	}
		}
	}
	
	public Boolean[] getResult() {		return this.dataReturn;		}
}
