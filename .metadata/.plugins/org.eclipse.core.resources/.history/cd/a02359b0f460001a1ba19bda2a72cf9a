package lab4;

import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;

public class RunnableExample {
	//option 1: use a static variable to find result
	static String M_SEARCHWORD = "java";
	
	public static void main(String[] args) {
		
		//string of existing data
		String [][] data = {
				 { "java", "I love java", "c++", "python" },
				 { "c programs", "cookies", "java developers", "oops"},
				 { "john", "doe", "mary", "mark holmes"},
				 { "hello java java", "byebye", "java again?", "java what?"},
				 { "toronto", "montreal", "quebec city", "calgary"}
				 };
		
		//option 1: to take user input and find result
		//take input from user for keyword search
		//Scanner object = new Scanner(System.in);
		//System.out.print("+ search word: ");
		//String searchWord = object.nextLine();
		
		System.out.print("+ search word: " + M_SEARCHWORD + "\n");	
		
		//create objects of SearchThreads to pass the array for comparision
		Thread runnableExample = new Thread(new SearchRunnable(data));
		
		//passing data into Runnable method
		System.out.println("+ summary");
		runnableExample.start();
		
		//object.close();
	}
}

class SearchRunnable implements Runnable {
	private String search = RunnableExample.M_SEARCHWORD;
	private String[][] dataArray = {};
	private Boolean[][] dataReturn = {};
	int counter = 0, fail_counter = 0, count = 0;
	ArrayList<String> dataStore = new ArrayList<String>();
	
	public SearchRunnable(String[][] information) {
		this.dataArray = information;
		for(int a = 0; a < this.dataArray.length; a++) {
			this.dataReturn = new Boolean[this.dataArray.length][this.dataArray[a].length];
		}
		
	}
	
	public void run() {
		if(this.search != null || this.search != "") {
			for(int a = 0; a < this.dataArray.length; a++) {
				for(int b = 0; b < this.dataArray[a].length; b++) {
					if(this.dataArray[a][b].contains(search))
						this.dataReturn[a][b] = true;
					else
						this.dataReturn[a][b] = false;
				}	
			}
			
			while (count < 1) {	
				this.fail_counter = 0;
				for (int c = 0; c < this.dataReturn.length; c++) {
					try {
						ThreadLocalRandom generator = ThreadLocalRandom.current();
						long random = generator.nextLong(100,2000);
						Thread.sleep(random);
					} catch( InterruptedException e) { }
					
					System.out.print("  row " + (c+1) + ": ");
					for(int d = 0; d < this.dataReturn[c].length; d++) {
						if(this.dataReturn[c][d] == true) {
							dataStore.add(dataArray[c][d]);
							counter++;
						} else
							this.fail_counter++;
					}
					if(fail_counter == this.dataReturn.length)
						System.out.print("***");
					else {
						for(String stg: dataStore)
							System.out.print(stg + ", ");
					}
					dataStore.removeAll(dataStore);
					//System.out.println();	
				}
				count++;
			}
		}	
		System.out.println("+ total number of strings found: " + counter + "\n");
	}
}




















